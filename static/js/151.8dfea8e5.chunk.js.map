{"version":3,"file":"static/js/151.8dfea8e5.chunk.js","mappings":"yJA6CA,MAAMA,EAAe,CAAC,EAUP,SAASC,EAAeC,GACrC,MAAMC,EAAWD,GAAWF,EACtBI,EAAMC,EAAOF,EAASC,KACtBE,EAAMH,EAASG,IACfC,EAAKF,EAAOF,EAASI,IACrBC,EAAWL,EAASK,UAAY,KAChCC,EAAOJ,EAAOF,EAASM,MAC7B,IAAIC,EAAOL,EAAOF,EAASO,MAC3B,MAAMC,EAASN,EAAOF,EAASQ,QACzBC,EAAQP,EAAOF,EAASS,OACxBC,EAAQV,EAASU,MAmBvB,OAjB4B,IAAxBV,EAASW,aACXJ,EAAO,CACL,CAACK,QAAS,sCAAuCC,KAAM,eACpDN,IAcA,SAAUO,EAAMC,GACrB,MAAMC,EACJD,EAAKE,KAAKV,MAAMG,OAASK,EAAKE,KAAKC,QAAQR,OAASA,GAASK,EAAKI,KAE9DC,EAAyB,SAAdN,EAAKO,KAAkB,IAAIP,EAAKQ,UAAY,CAACR,GAExDS,EAAO,CAAC,CAACF,KAAM,OAAQG,MAAO,OAAOC,EAAAA,EAAAA,GAAE,OAAQ,CAACC,QAAS,WAC/D,IAAIC,GAAS,EAUb,IARIP,EAASQ,OAAS,GACpBR,EAASS,QAAQ,CAACR,KAAM,OAAQG,MAAO,OAGrCR,GACFO,EAAKO,KAAK,CAACT,KAAM,OAAQG,MAAO,OAAOC,EAAAA,EAAAA,GAAE,QAAST,MAG3CW,EAAQpB,EAAKqB,QACpBL,EAAKO,KAAK,CAACT,KAAM,OAAQG,MAAO,OAAOC,EAAAA,EAAAA,GAAE,OAAQlB,EAAKoB,KAKxD,IAFAA,GAAS,IAEAA,EAAQrB,EAAKsB,QACpBL,EAAKO,KAAK,CAACT,KAAM,OAAQG,MAAO,OAAOC,EAAAA,EAAAA,GAAE,OAAQnB,EAAKqB,KAMxD,IAFAA,GAAS,IAEAA,EAAQlB,EAAMmB,QACrBL,EAAKO,KAAK,CAACT,KAAM,OAAQG,MAAO,OAAOC,EAAAA,EAAAA,GAAE,QAAShB,EAAMkB,KAK1D,IAFAA,GAAS,IAEAA,EAAQ1B,EAAI2B,QACnBL,EAAKO,KACH,CAACT,KAAM,OAAQG,MAAO,OACtBC,EAAAA,EAAAA,GAAE,OAAQ,CAACM,KAAM9B,EAAI0B,GAAQK,IAAK,gBAStC,IALAT,EAAKO,KAAK,CAACT,KAAM,OAAQG,MAAO,OAGhCG,GAAS,IAEAA,EAAQnB,EAAOoB,QACtBR,EAASU,KAAK,CAACT,KAAM,OAAQG,MAAO,OAAOC,EAAAA,EAAAA,GAAE,SAAUjB,EAAOmB,KAKhE,IAFAA,GAAS,IAEAA,EAAQvB,EAAGwB,QAClBR,EAASU,KAAK,CAACT,KAAM,OAAQG,MAAO,OAAOC,EAAAA,EAAAA,GAAE,SAAU,CAACQ,IAAK7B,EAAGuB,MAKlE,OAFAP,EAASU,KAAK,CAACT,KAAM,OAAQG,MAAO,OAE7B,CACLH,KAAM,OACNC,SAAU,CACR,CAACD,KAAM,WACP,CAACA,KAAM,OAAQG,MAAO,OACtBC,EAAAA,EAAAA,GAAE,OAAQ,CAACtB,MAAK+B,KAAM7B,GAAW,CAC/B,CAACgB,KAAM,OAAQG,MAAO,OACtBC,EAAAA,EAAAA,GAAE,OAAQF,GACV,CAACF,KAAM,OAAQG,MAAO,OACtBC,EAAAA,EAAAA,GAAE,OAAQL,GACV,CAACC,KAAM,OAAQG,MAAO,QAExB,CAACH,KAAM,OAAQG,MAAO,OAG5B,CACF,CAYA,SAAStB,EAAOsB,GACd,OAAiB,OAAVA,QAA4BW,IAAVX,EACrB,GACAY,MAAMC,QAAQb,GACZA,EACA,CAACA,EACT,C","sources":["../node_modules/rehype-document/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('hastscript').Properties} Properties\n *\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {Array<string> | string | null | undefined} [css]\n *   URLs to stylesheets to use in `<link>`s (optional).\n * @property {'auto' | 'ltr' | 'rtl' | null | undefined} [dir]\n *   Direction of the document (optional).\n * @property {Array<string> | string | null | undefined} [js]\n *   URLs to scripts to use as `src` on `<script>`s (optional).\n * @property {string | null | undefined} [language='en']\n *   Language of document (default: `'en'`); should be a\n *   [BCP 47](https://tools.ietf.org/html/bcp47) language tag.\n * @property {Array<Properties> | Properties | null | undefined} [link]\n *   Generate extra `<link>`s with these properties (optional); passed as\n *   `properties` to [`hastscript`](https://github.com/syntax-tree/hastscript)\n *   with `'link'`.\n * @property {Array<Properties> | Properties | null | undefined} [meta]\n *   Generate extra `<meta>`s with these properties (optional); passed as\n *   `properties` to [`hastscript`](https://github.com/syntax-tree/hastscript)\n *   with `'meta'`.\n * @property {boolean | null | undefined} [responsive=true]\n *   Generate a `meta[viewport]` (default: `true`).\n * @property {Array<string> | string | null | undefined} [script]\n *   JavaScript source code of `<script>`s to add at end of `body` (optional).\n * @property {Array<string> | string | null | undefined} [style]\n *   CSS source code of `<style>`s to add (optional).\n * @property {string | null | undefined} [title]\n *   Text to use as title (optional); defaults to the file name (if any); can\n *   bet set with `file.data.matter.title` (`vfile-matter`) and\n *   `file.data.meta.title` (`rehype-infer-title-meta`), which are preferred.\n */\n\nimport {h} from 'hastscript'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Wrap a fragment in a document.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeDocument(options) {\n  const settings = options || emptyOptions\n  const css = toList(settings.css)\n  const dir = settings.dir\n  const js = toList(settings.js)\n  const language = settings.language || 'en'\n  const link = toList(settings.link)\n  let meta = toList(settings.meta)\n  const script = toList(settings.script)\n  const style = toList(settings.style)\n  const title = settings.title\n\n  if (settings.responsive !== false) {\n    meta = [\n      {content: 'width=device-width, initial-scale=1', name: 'viewport'},\n      ...meta\n    ]\n  }\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {Root}\n   *   New tree.\n   */\n  return function (tree, file) {\n    const titleText =\n      file.data.meta?.title || file.data.matter?.title || title || file.stem\n    /** @type {Array<Nodes>} */\n    const contents = tree.type === 'root' ? [...tree.children] : [tree]\n    /** @type {Array<ElementContent>} */\n    const head = [{type: 'text', value: '\\n'}, h('meta', {charSet: 'utf-8'})]\n    let index = -1\n\n    if (contents.length > 0) {\n      contents.unshift({type: 'text', value: '\\n'})\n    }\n\n    if (titleText) {\n      head.push({type: 'text', value: '\\n'}, h('title', titleText))\n    }\n\n    while (++index < meta.length) {\n      head.push({type: 'text', value: '\\n'}, h('meta', meta[index]))\n    }\n\n    index = -1\n\n    while (++index < link.length) {\n      head.push({type: 'text', value: '\\n'}, h('link', link[index]))\n    }\n\n    // Inject style tags after linked CSS\n    index = -1\n\n    while (++index < style.length) {\n      head.push({type: 'text', value: '\\n'}, h('style', style[index]))\n    }\n\n    index = -1\n\n    while (++index < css.length) {\n      head.push(\n        {type: 'text', value: '\\n'},\n        h('link', {href: css[index], rel: 'stylesheet'})\n      )\n    }\n\n    head.push({type: 'text', value: '\\n'})\n\n    // Inject script tags before linked JS\n    index = -1\n\n    while (++index < script.length) {\n      contents.push({type: 'text', value: '\\n'}, h('script', script[index]))\n    }\n\n    index = -1\n\n    while (++index < js.length) {\n      contents.push({type: 'text', value: '\\n'}, h('script', {src: js[index]}))\n    }\n\n    contents.push({type: 'text', value: '\\n'})\n\n    return {\n      type: 'root',\n      children: [\n        {type: 'doctype'},\n        {type: 'text', value: '\\n'},\n        h('html', {dir, lang: language}, [\n          {type: 'text', value: '\\n'},\n          h('head', head),\n          {type: 'text', value: '\\n'},\n          h('body', contents),\n          {type: 'text', value: '\\n'}\n        ]),\n        {type: 'text', value: '\\n'}\n      ]\n    }\n  }\n}\n\n/**\n * Cast `value` to a list.\n *\n * @template Thing\n *   Value kind.\n * @param {Array<Thing> | Thing | null | undefined} value\n *   Value to cast.\n * @returns {Array<Thing>}\n *   List.\n */\nfunction toList(value) {\n  return value === null || value === undefined\n    ? []\n    : Array.isArray(value)\n      ? value\n      : [value]\n}\n"],"names":["emptyOptions","rehypeDocument","options","settings","css","toList","dir","js","language","link","meta","script","style","title","responsive","content","name","tree","file","titleText","data","matter","stem","contents","type","children","head","value","h","charSet","index","length","unshift","push","href","rel","src","lang","undefined","Array","isArray"],"sourceRoot":""}