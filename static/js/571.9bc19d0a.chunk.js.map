{"version":3,"file":"static/js/571.9bc19d0a.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/esm/index.mjs","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push[...newElements]` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      events.splice(index + 1, token.type === \"labelImage\" ? 4 : 2);\n      token.type = \"data\";\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: \"label\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: \"labelText\",\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","iterator","styleObject","inline_style_parser_1","default","hasIterator","forEach","__importDefault","require","nameRe","nameReJsx","emptyOptions","jsx","test","empty","hastToReact","classId","dataType","itemId","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","typeOf","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlnsXLink","StyleToObject","stringifyPosition","point","index","VFileMessage","causeOrReason","optionsOrParentOrPlace","origin","super","undefined","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","own","emptyMap","Map","cap","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","create","development","jsxDEV","props","isStaticChildren","children","pointStart","columnNumber","fileName","lineNumber","developmentCreate","jsxs","_","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","space","svg","html","stylePropertyNameCase","tableCellAlignToStyle","result","one","parentSchema","tagName","toLowerCase","findComponentFromName","alignValue","properties","createProperty","has","createElementProps","createChildren","filter","child","thing","addNode","addChildren","pop","element","data","estree","expression","body","assert","evaluateExpression","crashEstree","mdxExpression","attribute","attributes","objectExpression","assign","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","text","countsByName","count","get","set","info","find","Number","isNaN","commaSeparated","commas","spaces","styleToObject","replacer","toCamel","parseStyle","String","domCasing","cssCasing","from","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","includes","identifiers","split","isIdentifierName","object","computed","Boolean","optional","to","toDash","$1","toUpperCase","$0","urlAttributes","action","cite","formAction","href","icon","manifest","ping","poster","SpliceBuffer","initial","left","right","RangeError","shift","setCursor","stop","POSITIVE_INFINITY","reverse","concat","splice","deleteCount","items","Math","trunc","removed","chunkedPush","item","pushMany","unshift","unshiftMany","n","list","chunkStart","subtokenize","eventsArray","jumps","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","events","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","tokenize","effects","contentStart","attempt","constructs","contentInitial","code","consume","enter","exit","factorySpace","lineStart","markdownLineEnding","document","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","flowContinue","writeToChild","eof","seen","size","entry","ok","nok","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","partial","blankLine","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","fromCharCode","join","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","all","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","before","sequence","markdownSpace","initialSize","kind","asciiDigit","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","max","limit","balance","enclosedBefore","asciiControl","raw","enclosed","enclosedEscape","markdownLineEndingOrSpace","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","definition","identifier","labelAfter","normalizeIdentifier","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","asciiAlpha","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","asciiAlphanumeric","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","asciiHexDigit","characterEscape","asciiPunctuation","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","classifyCharacter","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","asciiAtext","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","lang","flowCodeInside","title","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","alt","characterReferenceType","ordered","spread","checked","compiler","postprocess","settings","combineExtensions","defaultConstructs","extensions","parse","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","d","combined","extension","remarkParse","doc","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","handlers","blockquote","wrap","patch","applyData","break","className","delete","footnoteReference","clobberPrefix","id","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","ariaDescribedBy","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","results","loose","listLoose","disabled","table","rows","firstRow","tableContent","pointEnd","tableCell","tableRow","align","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","structuredClone","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","values","handle","passThrough","shallow","unknownHandler","visit","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","remarkRehype","destination","async","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","_len","_key","middlewareIndex","callback","_len2","output","_key2","middleware","called","wrapped","_len3","_key3","fnExpectsCallback","done","apply","then","_len4","_key4","middelware","minpath","basename","path","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","add","plugin","plugins","entryIndex","primary","rest","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","unreachable","deprecation","mdastTree","remove","colon","questionMark","numberSign"],"sourceRoot":""}