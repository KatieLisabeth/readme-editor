{"version":3,"file":"static/js/601.798281b4.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/esm/index.mjs","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/unified/node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// Register MDX nodes in mdast:\n/// <reference types=\"mdast-util-mdx-expression\" />\n/// <reference types=\"mdast-util-mdx-jsx\" />\n/// <reference types=\"mdast-util-mdxjs-esm\" />\n\n/**\n * @typedef {import('estree').Identifier} Identifier\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree').MemberExpression} MemberExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @callback CreateEvaluater\n *   Create an evaluator that turns ESTree ASTs from embedded MDX into values.\n * @returns {Evaluater}\n *   Evaluater.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback EvaluateExpression\n *   Turn an MDX expression into a value.\n * @param {Expression} expression\n *   ESTree expression.\n * @returns {unknown}\n *   Result of expression.\n *\n * @callback EvaluateProgram\n *   Turn an MDX program (export/import statements) into a value.\n * @param {Program} expression\n *   ESTree program.\n * @returns {unknown}\n *   Result of program;\n *   should likely be `undefined` as ESM changes the scope but doesn’t yield\n *   something.\n *\n * @typedef Evaluater\n *   Evaluator that turns ESTree ASTs from embedded MDX into values.\n * @property {EvaluateExpression} evaluateExpression\n *   Evaluate an expression.\n * @property {EvaluateProgram} evaluateProgram\n *   Evaluate a program.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | MdxJsxFlowElement | MdxJsxTextElement | undefined, [prop: string]: Array<Child> | Child | Element | MdxJsxFlowElement | MdxJsxTextElement | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {CreateEvaluater | null | undefined} [createEvaluater]\n *   Create an evaluator that turns ESTree ASTs into values (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Evaluater | undefined} evaluater\n *   Evaluator that turns ESTree ASTs into values.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsm} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    // @ts-expect-error: `style-to-object` types are broken.\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push[...newElements]` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      events.splice(index + 1, token.type === \"labelImage\" ? 4 : 2);\n      token.type = \"data\";\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: \"label\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: \"labelText\",\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","iterator","styleObject","inline_style_parser_1","default","hasIterator","forEach","__importDefault","require","nameRe","nameReJsx","emptyOptions","jsx","test","empty","hastToReact","classId","dataType","itemId","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","typeOf","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlnsXLink","StyleToObject","pointEnd","point","pointStart","offset","undefined","stringifyPosition","index","VFileMessage","causeOrReason","optionsOrParentOrPlace","origin","super","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","own","emptyMap","Map","cap","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","create","development","jsxDEV","props","isStaticChildren","children","columnNumber","fileName","lineNumber","developmentCreate","jsxs","_","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","space","svg","html","stylePropertyNameCase","tableCellAlignToStyle","result","one","parentSchema","tagName","toLowerCase","findComponentFromName","alignValue","properties","createProperty","has","createElementProps","createChildren","filter","child","thing","addNode","addChildren","pop","element","data","estree","expression","body","assert","evaluateExpression","crashEstree","mdxExpression","attribute","attributes","objectExpression","assign","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","text","countsByName","count","get","set","info","find","Number","isNaN","commaSeparated","commas","spaces","styleToObject","replacer","toCamel","parseStyle","String","domCasing","cssCasing","from","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","includes","identifiers","split","isIdentifierName","object","computed","Boolean","optional","to","toDash","$1","toUpperCase","$0","urlAttributes","action","cite","formAction","href","icon","manifest","ping","poster","SpliceBuffer","initial","left","right","RangeError","shift","setCursor","stop","POSITIVE_INFINITY","reverse","concat","splice","deleteCount","items","Math","trunc","removed","chunkedPush","item","pushMany","unshift","unshiftMany","n","list","chunkStart","subtokenize","eventsArray","jumps","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","events","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","tokenize","effects","contentStart","attempt","constructs","contentInitial","code","consume","enter","exit","factorySpace","lineStart","markdownLineEnding","document","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","size","entry","ok","nok","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","partial","blankLine","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","fromCharCode","join","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","all","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","before","sequence","markdownSpace","initialSize","kind","asciiDigit","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","max","limit","balance","enclosedBefore","asciiControl","raw","enclosed","enclosedEscape","markdownLineEndingOrSpace","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","definition","identifier","labelAfter","normalizeIdentifier","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","asciiAlpha","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","asciiAlphanumeric","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","asciiHexDigit","characterEscape","asciiPunctuation","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","classifyCharacter","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","asciiAtext","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","lang","flowCodeInside","title","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","alt","characterReferenceType","ordered","spread","checked","compiler","postprocess","settings","combineExtensions","defaultConstructs","extensions","parse","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","d","combined","extension","remarkParse","doc","env","globalThis","deserialize","serialized","deserializer","$","as","out","unpair","Date","flags","RegExp","add","BigInt","EMPTY","keys","asString","shouldSkip","_ref","TYPE","serialize","json","lossy","serializer","strict","pair","valueOf","toJSON","entries","toISOString","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","handlers","blockquote","wrap","patch","applyData","break","className","delete","footnoteReference","clobberPrefix","id","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","ariaDescribedBy","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","results","loose","listLoose","disabled","table","rows","firstRow","tableContent","tableCell","tableRow","align","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","values","handle","passThrough","shallow","unknownHandler","visit","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","remarkRehype","destination","async","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","_len","_key","middlewareIndex","callback","_len2","output","_key2","middleware","called","wrapped","_len3","_key3","fnExpectsCallback","done","apply","then","_len4","_key4","middelware","minpath","basename","path","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","rest","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","unreachable","deprecation","mdastTree","remove","colon","questionMark","numberSign"],"sourceRoot":""}